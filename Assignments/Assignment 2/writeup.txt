Brian Taylor
52311859
z2b0b

==================
  Problem 1
==================

Logic:

There are two base cases, involving combining an empty list with a list and returning that list.
The induction (and reduction) step is the third line in the program where the procedure is called
recursively on the tails of each of the two input lists.

Sample output:

?- ['///Users/Brian/Google Drive/CPSC 312/Assignments/Assignment 2/proc1.pl'].
true.

?- proc1([a,b,c],[d,e,f],[a,d,b,e,c,f]).
true .

?- proc1([a,b],[d,e,f,g],[a,d,b,e,f,g]).
true .

?- proc1(X,Y,[1,2,3,4,5,6]).
X = [],
Y = [1, 2, 3, 4, 5, 6] 
X = [1, 2, 3, 4, 5, 6],
Y = [] 
X = [1],
Y = [2, 3, 4, 5, 6] 
X = [1, 3, 4, 5, 6],
Y = [2] 
X = [1, 3],
Y = [2, 4, 5, 6] 
X = [1, 3, 5, 6],
Y = [2, 4] 
X = [1, 3, 5],
Y = [2, 4, 6] 
X = [1, 3, 5],
Y = [2, 4, 6] 
false.

==================
  Problem 2a
==================

Logic:

The base case is that the duplication procedure called on an empty list produces an empty list.
The induction (and reduction) step is the second line where the procedure is called recursively
on the tail of the input list.

Sample output:

?- ['///Users/Brian/Google Drive/CPSC 312/Assignments/Assignment 2/proc2a.pl'].
true.

?- proc2a([a,b,c],[a,a,b,b,c,c]).
true.

?- proc2a(X,[a,a,b,b,c,c]).
X = [a, b, c].

?- proc2a([a,b,c],X).
X = [a, a, b, b, c, c].

?- proc2a([a,b,c],[a,b,c,a,b,c]).
false.

==================
  Problem 2b
==================

Logic:

There are three helper rules, each of which has a recursive call.
The first, solo, has a base case where the procedure called on an empty list is true.
The induction (and reduction) step is the second line where the procedure is called
recursively on the tail of the input list.
The second, uniq, has a base case where given an empty list as input it's true.
The induction (and reductino) step is the second line where the procedure is called
recursively on the tail of the input list.
The third, member, has a base case where the element we're looking for is the head
of the list.
The induction (and reduction) step is the second line where the procedure is called
recursively on the tail of the list that we're searching. If we hit the end of that
list without finding the element the procedure will fail, which is the desired result. 

Sample output:

?- ['///Users/Brian/Google Drive/CPSC 312/Assignments/Assignment 2/proc2b.pl'].
true.

?- proc2b([a,b,c],[a,b,a,b,c,c,c]).
true .

?- proc2b([a,b,c],[a,b,a,b,c,c,c,d]).
false.

?- proc2b([a,b,c,b],[a,b,a,b,c,c,c]).
false.

Unfortunately, my program does not generate the correct output for the following:

proc2b(X,[a,b,a,b,c,c,c]).

==================
  Problem 3
==================

Logic:

This procedure immediately calls a procedure with three inputs, adding an accumulator.
The base case of proc3\3 is where List 1 is the empty list and there are no duplicates
to remove.
There are two lines that have induction (and reduction) steps. The second and third lines
of proc3\3 have recursive calls on the tail of List 1. The difference in the lines reflects
whether the head of the list needed to be added to the accumulator or not.

Sample output:

?- ['///Users/Brian/Google Drive/CPSC 312/Assignments/Assignment 2/proc3.pl'].
true.

?- proc3([a,b,c,b,d,b],[d,c,b,a]).
true .

?- proc3([a,b,c,b,d,b],X).
X = [d, c, b, a] .

My program generated the list in reverse order to the one given in the problem description.

==================
  Problem 4
==================

Logic:

The base case of proc4 is that an empty list has exactly the same elements as another empty list.
The induction (and reduction) step is in the second line where the procedure is called
recursively with the tail of the first list.
The helper procedure, remove_one, also has a recursive call on the tails of the second and third 
input lists.

Sample output:

?- ['///Users/Brian/Google Drive/CPSC 312/Assignments/Assignment 2/proc4.pl'].
true.

?- proc4([a,b,c],[b,c,a]).
true .

?- proc4([a,b,c],[a,c,b]).
true .

?- proc4([a,b,c],[c,b,a]).
true .

?- proc4([a,b,c],X).
X = [a, b, c] 
X = [b, a, c] 
X = [b, c, a] 
X = [a, c, b] 
X = [c, a, b] 
X = [c, b, a] 
false.










